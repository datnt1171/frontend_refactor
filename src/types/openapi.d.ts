/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/processes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_processes_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_processes_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/action/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_tasks_action_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{task_id}/data/{field_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_data_retrieve"];
        put: operations["api_tasks_data_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_tasks_data_partial_update"];
        trace?: never;
    };
    "/api/tasks/received/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_received_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/sent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_sent_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/spr-report/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a report of tasks for a specific process using raw SQL. */
        get: operations["api_tasks_spr_report_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["api_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/change-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["api_users_me_change_password_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_users_me_change_password_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Action: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description: string;
            action_type: components["schemas"]["ActionTypeEnum"];
        };
        /**
         * @description * `approve` - Approve
         *     * `adjust` - Adjust
         *     * `confirm` - Confirm
         *     * `complete` - Complete
         *     * `close` - Close
         *     * `reject` - Reject
         *     * `cancel` - Cancel
         * @enum {string}
         */
        ActionTypeEnum: "approve" | "adjust" | "confirm" | "complete" | "close" | "reject" | "cancel";
        ChangePassword: {
            current_password: string;
            new_password: string;
            re_new_password: string;
        };
        CustomTokenObtainPair: {
            username: string;
            password: string;
        };
        Department: {
            /** Format: uuid */
            readonly id: string;
            name: string;
        };
        /**
         * @description * `text` - Text
         *     * `number` - Number
         *     * `date` - Date
         *     * `select` - Select
         *     * `file` - File
         *     * `json` - Table
         *     * `assignee` - Assignee
         *     * `factory` - Factory
         *     * `retailer` - Retailer
         * @enum {string}
         */
        FieldTypeEnum: "text" | "number" | "date" | "select" | "file" | "json" | "assignee" | "factory" | "retailer";
        PaginatedProcessListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["ProcessList"][];
        };
        PaginatedReceivedTaskList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["ReceivedTask"][];
        };
        PaginatedSentTaskList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["SentTask"][];
        };
        PaginatedUserListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["UserList"][];
        };
        PatchedChangePassword: {
            current_password?: string;
            new_password?: string;
            re_new_password?: string;
        };
        PatchedTaskData: {
            readonly field?: components["schemas"]["ProcessField"];
            value?: string | null;
            readonly files?: components["schemas"]["TaskFileData"][];
            /** Format: uri */
            file?: string;
        };
        ProcessDetail: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description?: string | null;
            version: string;
            readonly fields: components["schemas"]["ProcessField"][];
        };
        ProcessField: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            field_type?: components["schemas"]["FieldTypeEnum"];
            order: number;
            required?: boolean;
            options?: unknown;
        };
        ProcessList: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description?: string | null;
            version: string;
        };
        ReceivedTask: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: string;
            state: string;
            state_type: string;
            /** Format: date-time */
            readonly created_at: string;
            created_by: string;
            /** @description Single query optimization for current user's permissions. */
            readonly action: string | null;
        };
        Role: {
            /** Format: uuid */
            readonly id: string;
            name: string;
        };
        SPRReportRow: {
            /** Format: uuid */
            task_id: string;
            title: string;
            /** Format: date-time */
            created_at: string;
            created_by: string;
            /** Format: uuid */
            user_id: string;
            state: string;
            state_type: string;
            customer_name: string;
            finishing_code: string;
            customer_color_name: string;
            collection: string;
            quantity: string;
            deadline: string;
        };
        SentTask: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: string;
            state: string;
            state_type: string;
            /** Format: date-time */
            readonly created_at: string;
            /** @description Single query optimization - get all permissions for this task at once. */
            readonly recipient: string | null;
        };
        State: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            state_type: components["schemas"]["StateTypeEnum"];
        };
        /**
         * @description * `pending_approve` - Pending Approve
         *     * `analyze` - Analyze
         *     * `working` - Working
         *     * `pending_review` - Pending Review
         *     * `start` - Start
         *     * `denied` - Denied
         *     * `canceled` - Canceled
         *     * `closed` - Closed
         * @enum {string}
         */
        StateTypeEnum: "pending_approve" | "analyze" | "working" | "pending_review" | "start" | "denied" | "canceled" | "closed";
        TaskAction: {
            /** Format: uuid */
            action_id: string;
            comment?: string | null;
            /** Format: uri */
            file?: File;
        };
        TaskActionLog: {
            /** Format: uuid */
            readonly id: string;
            user: components["schemas"]["UserList"];
            action: components["schemas"]["Action"];
            /** Format: date-time */
            readonly created_at: string;
            comment?: string | null;
            readonly file: string;
        };
        TaskCreate: {
            /** Format: uuid */
            process: string;
            fields: components["schemas"]["TaskDataInput"][];
        };
        TaskData: {
            readonly field: components["schemas"]["ProcessField"];
            value?: string | null;
            readonly files: components["schemas"]["TaskFileData"][];
            /** Format: uri */
            file?: string;
        };
        TaskDataInput: {
            /** Format: uuid */
            field_id: string;
            value?: string | null;
            /** Format: uri */
            file?: string;
        };
        TaskDetail: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: components["schemas"]["ProcessList"];
            state: components["schemas"]["State"];
            created_by: components["schemas"]["UserList"];
            /** Format: date-time */
            readonly created_at: string;
            data: components["schemas"]["TaskData"][];
            action_logs: components["schemas"]["TaskActionLog"][];
            readonly available_actions: components["schemas"]["Action"][];
        };
        TaskFileData: {
            original_filename?: string;
            readonly uploaded_file: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        UserDetail: {
            /** Format: uuid */
            readonly id: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            department: components["schemas"]["Department"];
            role: components["schemas"]["Role"];
            readonly supervisor: components["schemas"]["UserList"];
            is_password_changed?: boolean;
        };
        UserList: {
            /** Format: uuid */
            readonly id: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_processes_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProcessListList"];
                };
            };
        };
    };
    api_processes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessDetail"];
                };
            };
        };
    };
    api_tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskCreate"];
                "multipart/form-data": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskCreate"];
                };
            };
        };
    };
    api_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
        };
    };
    api_tasks_action_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskAction"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskAction"];
                "multipart/form-data": components["schemas"]["TaskAction"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskAction"];
                };
            };
        };
    };
    api_tasks_data_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_data_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["TaskData"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskData"];
                "application/json": components["schemas"]["TaskData"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_data_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PatchedTaskData"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskData"];
                "application/json": components["schemas"]["PatchedTaskData"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_received_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReceivedTaskList"];
                };
            };
        };
    };
    api_tasks_sent_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSentTaskList"];
                };
            };
        };
    };
    api_tasks_spr_report_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPRReportRow"][];
                };
            };
        };
    };
    api_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomTokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomTokenObtainPair"];
                "multipart/form-data": components["schemas"]["CustomTokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTokenObtainPair"];
                };
            };
        };
    };
    api_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_users_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserListList"];
                };
            };
        };
    };
    api_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserList"];
                };
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    api_users_me_change_password_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePassword"];
                "application/x-www-form-urlencoded": components["schemas"]["ChangePassword"];
                "multipart/form-data": components["schemas"]["ChangePassword"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePassword"];
                };
            };
        };
    };
    api_users_me_change_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChangePassword"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedChangePassword"];
                "multipart/form-data": components["schemas"]["PatchedChangePassword"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePassword"];
                };
            };
        };
    };
}
