/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/processes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_processes_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/processes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_processes_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sheets/finishing-sheets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_finishing_sheets_list"];
        put?: never;
        post: operations["api_sheets_finishing_sheets_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sheets/finishing-sheets/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_finishing_sheets_retrieve"];
        put: operations["api_sheets_finishing_sheets_update"];
        post?: never;
        delete: operations["api_sheets_finishing_sheets_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_sheets_finishing_sheets_partial_update"];
        trace?: never;
    };
    "/api/sheets/formular-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_formular_templates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sheets/sheet-blueprints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_sheet_blueprints_list"];
        put?: never;
        post: operations["api_sheets_sheet_blueprints_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sheets/sheet-blueprints/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_sheet_blueprints_retrieve"];
        put: operations["api_sheets_sheet_blueprints_update"];
        post?: never;
        delete: operations["api_sheets_sheet_blueprints_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_sheets_sheet_blueprints_partial_update"];
        trace?: never;
    };
    "/api/sheets/step-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sheets_step_templates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/action/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_tasks_action_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{task_id}/data/{field_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_data_retrieve"];
        put: operations["api_tasks_data_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_tasks_data_partial_update"];
        trace?: never;
    };
    "/api/tasks/action-detail/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_action_detail_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/data-detail/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_data_detail_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/data-detail/{task_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_data_detail_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/onsite-transfer-absence/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_onsite_transfer_absence_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/overtime/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_overtime_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/received/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_received_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/sent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_sent_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/transfer-absence/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_tasks_transfer_absence_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["api_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/change-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["api_users_me_change_password_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_users_me_change_password_partial_update"];
        trace?: never;
    };
    "/api/users/onsite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_onsite_list"];
        put?: never;
        post: operations["api_users_onsite_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/onsite/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_onsite_retrieve"];
        put: operations["api_users_onsite_update"];
        post?: never;
        delete: operations["api_users_onsite_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_users_onsite_partial_update"];
        trace?: never;
    };
    "/api/users/onsite/bulk_update/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update multiple assignments at once */
        post: operations["api_users_onsite_bulk_update_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Action: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description: string;
            action_type: components["schemas"]["ActionTypeEnum"];
        };
        /**
         * @description * `approve` - Approve
         *     * `adjust` - Adjust
         *     * `confirm` - Confirm
         *     * `complete` - Complete
         *     * `close` - Close
         *     * `reject` - Reject
         *     * `cancel` - Cancel
         * @enum {string}
         */
        ActionTypeEnum: "approve" | "adjust" | "confirm" | "complete" | "close" | "reject" | "cancel";
        ChangePassword: {
            current_password: string;
            new_password: string;
            re_new_password: string;
        };
        CustomTokenObtainPair: {
            username: string;
            password: string;
        };
        Department: {
            /** Format: uuid */
            readonly id: string;
            name: string;
        };
        FieldCondition: {
            /** Format: uuid */
            readonly id: string;
            /**
             * Format: uuid
             * @description The field to check the value of
             */
            condition_field?: string | null;
            operator: components["schemas"]["OperatorEnum"];
            /** @description Value(s) to compare against */
            value: unknown;
        };
        /**
         * @description * `text` - Text
         *     * `number` - Number
         *     * `date` - Date
         *     * `time` - Time
         *     * `select` - Select
         *     * `multiselect` - Multi Select
         *     * `file` - File
         *     * `json` - Table
         *     * `assignee` - Assignee
         *     * `factory` - Factory
         *     * `retailer` - Retailer
         * @enum {string}
         */
        FieldTypeEnum: "text" | "number" | "date" | "time" | "select" | "multiselect" | "file" | "json" | "assignee" | "factory" | "retailer";
        FinishingSheet: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            task: string;
            finishing_code: string;
            name: string;
            sheen: string;
            dft: string;
            type_of_paint: string;
            type_of_substrate: string;
            finishing_surface_grain: string;
            sampler: string;
            chemical_waste: string;
            conveyor_speed: string;
            with_panel_test: boolean;
            testing: boolean;
            chemical_yellowing: boolean;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_by: components["schemas"]["User"];
            /** Format: date-time */
            readonly updated_at: string;
            readonly updated_by: components["schemas"]["User"];
            rows: components["schemas"]["SheetRow"][];
        };
        FormularTemplate: {
            /** Format: uuid */
            readonly id: string;
            code: string;
            viscosity: number | null;
            wft?: number | null;
            products: components["schemas"]["ProductTemplate"][];
        };
        /**
         * @description * `1` - 1
         *     * `2` - 2
         *     * `3` - 3
         *     * `4` - 4
         *     * `5` - 5
         *     * `6` - 6
         *     * `7` - 7
         *     * `8` - 8
         *     * `9` - 9
         *     * `10` - 10
         *     * `11` - 11
         *     * `12` - 12
         * @enum {integer}
         */
        MonthEnum: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
        OnsiteTransferAbsence: {
            factory_code: string;
            ktw_onsite: number;
            ktc_onsite: number;
            kvn_onsite: number;
            ktw_in: number;
            ktc_in: number;
            kvn_in: number;
            ktw_out: number;
            ktc_out: number;
            kvn_out: number;
            ktw_absence: number;
            ktc_absence: number;
            kvn_absence: number;
            factory_name: string;
        };
        /**
         * @description * `exact` - Exact
         *     * `not_exact` - Not Exact
         *     * `contains` - Contains
         *     * `not_contains` - Not Contains
         *     * `in` - In
         *     * `not_in` - Not In
         *     * `gt` - Greater Than
         *     * `lt` - Less Than
         *     * `gte` - Greater Than or Equal
         *     * `lte` - Less Than or Equal
         *     * `is_empty` - Is Empty
         *     * `is_not_empty` - Is Not Empty
         *     * `weekday` - Week day
         * @enum {string}
         */
        OperatorEnum: "exact" | "not_exact" | "contains" | "not_contains" | "in" | "not_in" | "gt" | "lt" | "gte" | "lte" | "is_empty" | "is_not_empty" | "weekday";
        Overtime: {
            factory_code: string;
            weekday_ot: string;
            /** Format: time */
            weekday_ot_start: string;
            /** Format: time */
            weekday_ot_end: string;
            weekday_ot_num: number;
            hanging_line_today: string;
            pallet_line_today: string;
            others_today: string;
            hanging_line_tomorrow: string;
            pallet_line_tomorrow: string;
            others_tomorrow: string;
            instock: string;
            instock_by_code: string;
            sunday_ot: string;
            /** Format: time */
            sunday_ot_end: string;
            sunday_ot_num: number;
            hanging_line_sunday: string;
            pallet_line_sunday: string;
            /** Format: date */
            created_at: string;
            factory_name: string;
        };
        PaginatedFinishingSheetList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["FinishingSheet"][];
        };
        PaginatedProcessList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["Process"][];
        };
        PaginatedReceivedTaskList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["ReceivedTask"][];
        };
        PaginatedSentTaskList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["SentTask"][];
        };
        PaginatedSheetBlueprintList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["SheetBlueprint"][];
        };
        PaginatedUserDetailList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous: string | null;
            results: components["schemas"]["UserDetail"][];
        };
        PatchedChangePassword: {
            current_password?: string;
            new_password?: string;
            re_new_password?: string;
        };
        PatchedFinishingSheet: {
            /** Format: uuid */
            readonly id?: string;
            /** Format: uuid */
            task?: string;
            finishing_code?: string;
            name?: string;
            sheen?: string;
            dft?: string;
            type_of_paint?: string;
            type_of_substrate?: string;
            finishing_surface_grain?: string;
            sampler?: string;
            chemical_waste?: string;
            conveyor_speed?: string;
            with_panel_test?: boolean;
            testing?: boolean;
            chemical_yellowing?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            readonly created_by?: components["schemas"]["User"];
            /** Format: date-time */
            readonly updated_at?: string;
            readonly updated_by?: components["schemas"]["User"];
            rows?: components["schemas"]["SheetRow"][];
        };
        PatchedSheetBlueprint: {
            /** Format: uuid */
            readonly id?: string;
            /** Format: uuid */
            finishing_sheet?: string;
            readonly finishing_sheet_detail?: components["schemas"]["FinishingSheet"];
            blueprint?: string;
            description?: string;
            /** Format: date-time */
            readonly created_at?: string;
            readonly created_by?: components["schemas"]["User"];
            /** Format: date-time */
            readonly updated_at?: string;
            readonly updated_by?: components["schemas"]["User"];
        };
        PatchedTaskData: {
            readonly field?: components["schemas"]["ProcessField"];
            value?: string | null;
            readonly files?: components["schemas"]["TaskFileData"][];
            /** Format: uri */
            file?: string;
            readonly history?: components["schemas"]["TaskDataHistory"][];
        };
        PatchedUserFactoryOnsite: {
            /** Format: uuid */
            readonly id?: string;
            /** Format: uuid */
            user?: string;
            factory?: string;
            year?: number;
            month?: components["schemas"]["MonthEnum"];
        };
        Process: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description?: string | null;
            version: string;
        };
        ProcessDetail: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description?: string | null;
            version: string;
            readonly fields: components["schemas"]["ProcessField"][];
        };
        ProcessField: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description?: string;
            field_type: components["schemas"]["FieldTypeEnum"];
            order: number;
            required: boolean;
            options?: unknown;
            readonly conditions: components["schemas"]["FieldCondition"][];
        };
        ProductTemplate: {
            /** Format: uuid */
            readonly id: string;
            code: string;
            name: string;
            readonly type_en: string;
            readonly type_vi: string;
            readonly type_zh_hant: string;
            /** Format: decimal */
            ratio: string;
            unit?: string;
        };
        ReceivedTask: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: string;
            state: string;
            state_type: string;
            /** Format: date-time */
            readonly created_at: string;
            created_by: string;
            /** @description Single query optimization for current user's permissions. */
            readonly action: string | null;
            /** @description Get finishing code for SP tasks only. */
            readonly finishing_code: string | null;
            /** @description Get customer color name for SP tasks only. */
            readonly customer_color_name: string | null;
        };
        Role: {
            /** Format: uuid */
            readonly id: string;
            name: string;
        };
        RowProduct: {
            /** Format: uuid */
            readonly id: string;
            order: number;
            product_code: string;
            product_name: string;
            product_type_en: string;
            product_type_vi: string;
            product_type_zh_hant: string;
            ratio: string;
            qty: string;
            unit: string;
            check_result?: string;
            correct_action?: string;
            te1_signature?: string;
            customer_signature?: string;
            /** Format: uuid */
            readonly created_by: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: uuid */
            readonly updated_by: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SentTask: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: string;
            state: string;
            state_type: string;
            /** Format: date-time */
            readonly created_at: string;
            /** @description Single query optimization - get all permissions for this task at once. */
            readonly recipient: string | null;
            /** @description Get finishing code for SP tasks only. */
            readonly finishing_code: string | null;
            /** @description Get customer color name for SP tasks only. */
            readonly customer_color_name: string | null;
        };
        SheetBlueprint: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            finishing_sheet: string;
            readonly finishing_sheet_detail: components["schemas"]["FinishingSheet"];
            blueprint: string;
            description?: string;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_by: components["schemas"]["User"];
            /** Format: date-time */
            readonly updated_at: string;
            readonly updated_by: components["schemas"]["User"];
        };
        SheetRow: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            step_template?: string | null;
            /** Format: uuid */
            formular_template?: string | null;
            step_num: number;
            /** Format: decimal */
            spot?: string | null;
            stepname_en: string;
            stepname_vi: string;
            stepname_zh_hant: string;
            stepname_short_en: string;
            stepname_short_vi: string;
            stepname_short_zh_hant: string;
            sanding_en: string;
            sanding_vi: string;
            sanding_zh_hant: string;
            viscosity_en: string;
            viscosity_vi: string;
            viscosity_zh_hant: string;
            spec_en: string;
            spec_vi: string;
            spec_zh_hant: string;
            hold_time: string;
            chemical_code: string;
            consumption: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: uuid */
            readonly created_by: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: uuid */
            readonly updated_by: string;
            products: components["schemas"]["RowProduct"][];
        };
        State: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            state_type: components["schemas"]["StateTypeEnum"];
        };
        /**
         * @description * `pending_approve` - Pending Approve
         *     * `analyze` - Analyze
         *     * `working` - Working
         *     * `pending_review` - Pending Review
         *     * `start` - Start
         *     * `denied` - Denied
         *     * `canceled` - Canceled
         *     * `closed` - Closed
         *     * `static` - Static
         * @enum {string}
         */
        StateTypeEnum: "pending_approve" | "analyze" | "working" | "pending_review" | "start" | "denied" | "canceled" | "closed" | "static";
        /** @description Always return all the translation regardless Accept-Language
         *     because finising sheet is a snapshot so it wont benefit from FK */
        StepTemplate: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            short_name: string;
            spec?: string;
            hold_time: number;
            /** Format: decimal */
            consumption: string;
            readonly name_en: string;
            readonly name_vi: string;
            readonly name_zh_hant: string;
            readonly short_name_en: string;
            readonly short_name_vi: string;
            readonly short_name_zh_hant: string;
            readonly spec_en: string;
            readonly spec_vi: string;
            readonly spec_zh_hant: string;
            readonly sanding_en: string;
            readonly sanding_vi: string;
            readonly sanding_zh_hant: string;
        };
        TaskAction: {
            /** Format: uuid */
            action_id: string;
            comment?: string | null;
            /** Format: uri */
            file?: File;
        };
        TaskActionDetail: {
            /** Format: uuid */
            task_id: string;
            title: string;
            /** Format: date-time */
            created_at: string;
            created_by: string;
            state: string;
            state_type: string;
            action: string;
            action_type: string;
            action_created_by: string;
            /** Format: date-time */
            action_created_at: string;
            comment: string;
            duration: string;
        };
        TaskActionLog: {
            /** Format: uuid */
            readonly id: string;
            user: components["schemas"]["User"];
            action: components["schemas"]["Action"];
            /** Format: date-time */
            readonly created_at: string;
            comment?: string | null;
            readonly file: string;
        };
        TaskCreate: {
            /** Format: uuid */
            process: string;
            fields: components["schemas"]["TaskDataInput"][];
        };
        TaskData: {
            readonly field: components["schemas"]["ProcessField"];
            value?: string | null;
            readonly files: components["schemas"]["TaskFileData"][];
            /** Format: uri */
            file?: string;
            readonly history: components["schemas"]["TaskDataHistory"][];
        };
        TaskDataDetail: {
            /** Format: uuid */
            task_id: string;
            title: string;
            /** Format: date */
            created_at: string;
            created_by: string;
            state: string;
            state_type: string;
            factory_code: string;
            finishing_code: string;
            retailer_id: string;
            customer_color_name: string;
            type_of_substrate: string;
            collection: string;
            sample_type: string;
            quantity_requirement: string;
            requester_name: string;
            deadline_request: string;
            sampler: string;
            sampler_id: string;
            type_of_paint: string;
            finishing_surface_grain: string;
            sheen_level: string;
            substrate_surface_treatment: string;
            panel_category: string;
            purpose_of_usage: string;
            additional_detail: string;
            retailer_name: string;
            factory_name: string;
        };
        TaskDataHistory: {
            value?: string | null;
            readonly updated_by: string;
            /** Format: date-time */
            updated_at: string;
        };
        TaskDataInput: {
            /** Format: uuid */
            field_id: string;
            value?: string | null;
            /** Format: uri */
            file?: string;
        };
        TaskDetail: {
            /** Format: uuid */
            readonly id: string;
            readonly title: string;
            process: components["schemas"]["Process"];
            state: components["schemas"]["State"];
            created_by: components["schemas"]["User"];
            /** Format: date-time */
            readonly created_at: string;
            data: components["schemas"]["TaskData"][];
            action_logs: components["schemas"]["TaskActionLog"][];
            readonly available_actions: components["schemas"]["Action"][];
        };
        TaskFileData: {
            original_filename?: string;
            readonly uploaded_file: string;
            /** Format: date-time */
            readonly uploaded_at: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TransferAbsence: {
            factory_code: string;
            user_id: string;
            transfer_type: string;
            /** Format: date */
            from_date: string;
            /** Format: date */
            to_date: string;
            reason: string;
            username: string;
            first_name: string;
            last_name: string;
            factory_name: string;
        };
        User: {
            /** Format: uuid */
            readonly id: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
        };
        UserDetail: {
            /** Format: uuid */
            readonly id: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name?: string;
            last_name?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            department: components["schemas"]["Department"];
            role: components["schemas"]["Role"];
            readonly supervisor: components["schemas"]["User"];
            is_password_changed: boolean;
        };
        UserFactoryOnsite: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            user: string;
            factory: string;
            year: number;
            month: components["schemas"]["MonthEnum"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_processes_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProcessList"];
                };
            };
        };
    };
    api_processes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessDetail"];
                };
            };
        };
    };
    api_sheets_finishing_sheets_list: {
        parameters: {
            query?: {
                created_by?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                task?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFinishingSheetList"];
                };
            };
        };
    };
    api_sheets_finishing_sheets_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinishingSheet"];
                "application/x-www-form-urlencoded": components["schemas"]["FinishingSheet"];
                "multipart/form-data": components["schemas"]["FinishingSheet"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinishingSheet"];
                };
            };
        };
    };
    api_sheets_finishing_sheets_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this finishing sheet. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinishingSheet"];
                };
            };
        };
    };
    api_sheets_finishing_sheets_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this finishing sheet. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinishingSheet"];
                "application/x-www-form-urlencoded": components["schemas"]["FinishingSheet"];
                "multipart/form-data": components["schemas"]["FinishingSheet"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinishingSheet"];
                };
            };
        };
    };
    api_sheets_finishing_sheets_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this finishing sheet. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_sheets_finishing_sheets_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this finishing sheet. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFinishingSheet"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFinishingSheet"];
                "multipart/form-data": components["schemas"]["PatchedFinishingSheet"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinishingSheet"];
                };
            };
        };
    };
    api_sheets_formular_templates_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormularTemplate"][];
                };
            };
        };
    };
    api_sheets_sheet_blueprints_list: {
        parameters: {
            query?: {
                blueprint?: string;
                finishing_sheet?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSheetBlueprintList"];
                };
            };
        };
    };
    api_sheets_sheet_blueprints_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SheetBlueprint"];
                "application/x-www-form-urlencoded": components["schemas"]["SheetBlueprint"];
                "multipart/form-data": components["schemas"]["SheetBlueprint"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SheetBlueprint"];
                };
            };
        };
    };
    api_sheets_sheet_blueprints_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this sheet blueprint. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SheetBlueprint"];
                };
            };
        };
    };
    api_sheets_sheet_blueprints_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this sheet blueprint. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SheetBlueprint"];
                "application/x-www-form-urlencoded": components["schemas"]["SheetBlueprint"];
                "multipart/form-data": components["schemas"]["SheetBlueprint"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SheetBlueprint"];
                };
            };
        };
    };
    api_sheets_sheet_blueprints_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this sheet blueprint. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_sheets_sheet_blueprints_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this sheet blueprint. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSheetBlueprint"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSheetBlueprint"];
                "multipart/form-data": components["schemas"]["PatchedSheetBlueprint"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SheetBlueprint"];
                };
            };
        };
    };
    api_sheets_step_templates_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StepTemplate"][];
                };
            };
        };
    };
    api_tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskCreate"];
                "multipart/form-data": components["schemas"]["TaskCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskCreate"];
                };
            };
        };
    };
    api_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDetail"];
                };
            };
        };
    };
    api_tasks_action_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskAction"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskAction"];
                "multipart/form-data": components["schemas"]["TaskAction"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskAction"];
                };
            };
        };
    };
    api_tasks_data_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_data_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["TaskData"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskData"];
                "application/json": components["schemas"]["TaskData"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_data_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field_id: string;
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PatchedTaskData"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskData"];
                "application/json": components["schemas"]["PatchedTaskData"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskData"];
                };
            };
        };
    };
    api_tasks_action_detail_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskActionDetail"][];
                };
            };
        };
    };
    api_tasks_data_detail_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDataDetail"][];
                };
            };
        };
    };
    api_tasks_data_detail_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDataDetail"];
                };
            };
        };
    };
    api_tasks_onsite_transfer_absence_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnsiteTransferAbsence"][];
                };
            };
        };
    };
    api_tasks_overtime_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Overtime"][];
                };
            };
        };
    };
    api_tasks_received_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReceivedTaskList"];
                };
            };
        };
    };
    api_tasks_sent_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSentTaskList"];
                };
            };
        };
    };
    api_tasks_transfer_absence_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransferAbsence"][];
                };
            };
        };
    };
    api_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomTokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomTokenObtainPair"];
                "multipart/form-data": components["schemas"]["CustomTokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTokenObtainPair"];
                };
            };
        };
    };
    api_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_users_list: {
        parameters: {
            query?: {
                department__name?: string;
                /** @description Multiple values may be separated by commas. */
                department__name__in?: string[];
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                role__name?: string;
                /** @description Multiple values may be separated by commas. */
                role__name__in?: string[];
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserDetailList"];
                };
            };
        };
    };
    api_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    api_users_me_change_password_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePassword"];
                "application/x-www-form-urlencoded": components["schemas"]["ChangePassword"];
                "multipart/form-data": components["schemas"]["ChangePassword"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePassword"];
                };
            };
        };
    };
    api_users_me_change_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChangePassword"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedChangePassword"];
                "multipart/form-data": components["schemas"]["PatchedChangePassword"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePassword"];
                };
            };
        };
    };
    api_users_onsite_list: {
        parameters: {
            query?: {
                factory?: string;
                /** @description * `1` - 1
                 *     * `2` - 2
                 *     * `3` - 3
                 *     * `4` - 4
                 *     * `5` - 5
                 *     * `6` - 6
                 *     * `7` - 7
                 *     * `8` - 8
                 *     * `9` - 9
                 *     * `10` - 10
                 *     * `11` - 11
                 *     * `12` - 12 */
                month?: 1 | 10 | 11 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                user?: string;
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"][];
                };
            };
        };
    };
    api_users_onsite_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserFactoryOnsite"];
                "application/x-www-form-urlencoded": components["schemas"]["UserFactoryOnsite"];
                "multipart/form-data": components["schemas"]["UserFactoryOnsite"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"];
                };
            };
        };
    };
    api_users_onsite_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this user factory onsite. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"];
                };
            };
        };
    };
    api_users_onsite_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this user factory onsite. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserFactoryOnsite"];
                "application/x-www-form-urlencoded": components["schemas"]["UserFactoryOnsite"];
                "multipart/form-data": components["schemas"]["UserFactoryOnsite"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"];
                };
            };
        };
    };
    api_users_onsite_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this user factory onsite. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_onsite_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this user factory onsite. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserFactoryOnsite"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserFactoryOnsite"];
                "multipart/form-data": components["schemas"]["PatchedUserFactoryOnsite"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"];
                };
            };
        };
    };
    api_users_onsite_bulk_update_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserFactoryOnsite"];
                "application/x-www-form-urlencoded": components["schemas"]["UserFactoryOnsite"];
                "multipart/form-data": components["schemas"]["UserFactoryOnsite"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFactoryOnsite"];
                };
            };
        };
    };
}
